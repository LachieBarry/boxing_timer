<button id="start" type="button">Start!</button>
<button id="pause" type="button">Pause!</button>
<button id="resume" type="button">Resume!</button>
<button id="reset" type="button">Reset Round!</button>
<button id="reset-all" type="button">Reset Workout!</button>

<div><p id="round-hidden" class="hide"> </p></div>
<div><p id="round"> </p></div>
<div><p id="combo"> </p></div>
<div><p id="phase"> </p></div>
<div><p id="timer"> </p></div>
<div><p id="progress"> </p></div>

<script>
const allRounds = <%= raw @rounds.to_json %>;
const roundDisplay = document.querySelector("#round");
const roundIndexHidden = document.querySelector("#round-hidden");
const timerDisplay = document.querySelector("#timer");
const phaseDisplay = document.querySelector("#phase");
const comboDisplay = document.querySelector("#combo");
const progressDisplay = document.querySelector("#progress");

const startButton = document.querySelector("#start");
const pauseButton = document.querySelector("#pause");
const resumeButton = document.querySelector("#resume");
const resetButton = document.querySelector("#reset");
const resetAllButton = document.querySelector("#reset-all");

let state = ""
</script>


<script>



function runRound(roundIndex, phase, countStart) {
  let state = ""
  const round = allRounds[roundIndex];
  const comboSpeech = new SpeechSynthesisUtterance();
  const restSpeech = new SpeechSynthesisUtterance();

  countStart === 0 ? (count = ((phase === 'work') ? round.work_time * 100 : round.rest_time * 100)) : count = countStart;

  restSpeech.text = "rest"
  comboSpeech.text = `${round.combo}`;
  phase === "work" ? window.speechSynthesis.speak(comboSpeech) : window.speechSynthesis.speak(restSpeech);

  let timer = setInterval(function() {
    let progress = (phase === 'work') ? (count / round.work_time).toFixed(2) : (count / round.rest_time).toFixed(2);
    let currentRound = round

    count--;
    roundDisplay.innerText = `Round ${roundIndex + 1}`;
    roundIndexHidden.innerText = roundIndex;
    comboDisplay.innerText = round.combo;
    phaseDisplay.innerText = phase;
    timerDisplay.innerText = (count / 100).toFixed(2);
    progressDisplay.innerText = `${progress}%`;

    if (count === 0) {
      clearInterval(timer);
      console.log(`Time's up for ${phase} phase!`);

      // Move to the next phase or round if available
      if (phase === 'work') {
        if (roundIndex !== allRounds.length - 1) {
          setTimeout(() => runRound(roundIndex, 'rest', 0), 10); // Start resting after 1000ms (adjust as needed)
        }
      } else {
        if (roundIndex < allRounds.length - 1) {
          setTimeout(() => runRound(roundIndex + 1, 'work', 0), 10); // Start working after 1000ms (adjust as needed)
        }
      }
    }

    if (state === "paused") {
      clearInterval(timer);
    };




    pauseButton.addEventListener("click", (event) => {
      console.log("clicked");
      console.log("clearing");
      clearInterval(timer);
      console.log("done");
    });
  }, 10);




}

resumeButton.addEventListener("click", (event) => {
    console.log("clicked");

    // need something to reset!

    let roundStart = document.querySelector("#round-hidden").innerText;
    let phaseStart = document.querySelector("#phase").innerText;
    let countStart = document.querySelector("#timer").innerText * 100;
    runRound(roundStart, phaseStart, countStart);


    console.log("resuming");
  });

startButton.addEventListener("click", (event) => {
  let state = "paused"
  console.log("clicked");
  runRound(0, 'work', 0);
  startButton.classList.toggle("hide")
  console.log("done");
});

resetButton.addEventListener("click", (event) => {
  let state = "paused"
  clearInterval(timer);
  console.log("clicked");

  let roundStart = parseInt(document.querySelector("#round-hidden").innerText);
  let phaseStart = document.querySelector("#phase").innerText;

  roundDisplay.innerText = `Round ${roundStart + 1}`;

  runRound(roundStart, phaseStart, 0);
  console.log("done");
});

resetAllButton.addEventListener("click", (event) => {
  let state = "paused"
  clearInterval(timer);
  runRound(0, 'work', 0);
  console.log("done");
});


</script>
          <%# const comboNames = new Array() %>

      <%# <% @rounds.each do |round| %>
        <%# comboNames.push( <%= round.combo %>
      <%# <% end %>
